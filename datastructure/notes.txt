Data Structures
- Ways of organizing information with optimal 'runtime complexity' for adding or removing records

Javascript natively implements several data structures. And we can be asked about 'inferior' data structures.

Functionality of a JS Array:
- Does everything that a classic queue data structure does





What is a queue?
- A queue can be thought of as like a container of sorts, where records or pieces of data enter on one end of this container and then exit on the other
           |-----------Queue------------|
  [Record]->[Record]->[Record]->[Record]->[Record]

  e.g., waiting in line to buy tickets from the movie theatre
           |-----------Queue------------|
  [Person]->[Person]->[Person]->[Person]->[Person][Ticketing Counter]
  
- In a queue, there's no idea of skipping or cutting in line. So, the order in which you get into this queue also dictates the order in which you come out. First in, first out (F-I-F-O)
  ================================================
  [A]----->|                   | Nothing in queue
  [B]      |                   |
  ================================================
  [B]----->|        [A]        | 'A' added
           |                   |
  ================================================
           |     [B]->[A]      | 'B' added
           |                   |
  ================================================
           |        [B]        | 'A' removed
           |                   |
  ================================================

- The process of adding a record into a queue is referred to as enqueueing or adding a record, and taking something out from the other end is thought of 
  as dequeuing or removing a record.

- If an interviewer asks you to implement a queue... Remember when we're working with Javascript, we really don't have a rudimentary queue. We have Javascript arrays
  which are super hyper functional in nature - they have a ton of different ways of interacting with them, whereas a queue has just this tiny little API attached to it.
  So when we want to implement a queue, usually what we end up doing is taking an array, and then restricting the methods that can be used to enter in to interact with that array.
  With Javascript, it's done by using the unshift method and then removing something from the end of an array is done by using the pop method.
  
  Queue             | Array Equivalent
  -------------------------------------
  Add to queue      | array.unshift();
  Remove from queue | array.pop();

  A very common way of implementing a queue would be to do something like this right below. We might make a queue class like an ES 2015 class. 
  Inside of that class, we'll initialize an empty array. That array has all these different methods associated with it.

  Queue Class
  - Array
    - shift
    - unshift -> add
    - push
    - pop -> remove
    - splice
    - slice

  It has all the capabilities in the world, but to make sure that its really clear that we are producing a queue, and so its something that should be interacting with only 
  as a queue should be. We will usually only expose the unshift and pop methods outside of the class. So in other words, whenever we make a queue with Javascript, we usually 
  make an array, but we do our best to hide access to all these methods that belong to the array.

  So it might be baffling why in the world would we do that... why would we take an array and purposefully kind of handicap it here and remove some of the methods?
  There are two answers to that:
  1. On one hand, it's kind of obvious in an interview setting. If your interviewer says make a queue, then well, we're going to make a queue and we're going to do whatever they say.
  2. The other reason for kind of hiding the functionality of an array in more of a practical setting are like on a real project, maybe imagine for a second you are working on some 
     complicated problem, and you want to make you want to solve the problem with an algorithm using a queue. And you realize that if you use a queue it will be a fantastic algorithm 
     like the best one in the world possible for solving this problem, but if you interact with that queue as though it were an array, then all/some of the performance of that goes downhill.
     So one possible reason to use a queue and try to obfuscate all the other methods that an array has, would be to make sure that if some other engineer came and started looking at your 
     algorithms sometime in the future, they wouldn't go like oh this is an array I could just treat it like an array and reorder the elements inside of it or remove the first element 
     out of it or whatever it might be.






What is a stack?
- A stack is extraordinarily similar to a queue. There's just a couple items here and there that are slightly different. So with the stack we are still dealing with an ordered list of records 
  and you can imagine that those records are living inside of some container which is the actual stack. 

            [Record]
  [Record]     /\ 
  Push|   ______| Pop
      V   | _
   [Record]  |
   [Record]  | Stack
   [Record] _|

- In a queue items are FIFO, but here in a stack, it's FILO - First In, Last Out
            
     [A]  [b]
  Push|   
      V   
   ____________
  |           |
  |           | Stack
  |___________|
  =====================
     [b]
  Push|   
      V   
   ____________
  |           |
  |           | Stack
  |____[A]____|
  =====================
   ____________
  |           |
  |    [B]    | Stack
  |____[A]____|
  =====================
     [b]
      /\
      | Pop      
   ____________
  |           |
  |           | Stack
  |____[A]____|
  =====================

- The process of adding a record into a stack is referred to as pushing, and taking something out from the other end is thought of as popping a record.

- Stack methods:
  - push  -> Add a record to the stack
  - pop   -> Remove the "top" record in the stack
  - peek  -> Return the "top" record without popping it

What is a linked list?
- It's an ordered collection of data. The collection contains a number of different nodes. E.g., 4 nodes below... 4 separate nodes, each with some amount of data along with a 
  reference to the next node:
  ['Hi'][o]->['There'][o]->['How're'][o]->['You?'][o]->null 

  When we put a handful of these nodes together, we refer to it as a linked list because it quite literally is a list of linked nodes. We will also very frequently refer to this 
  as a chain or a chain of nodes that are strung together.

  The list of nodes that form this chain has an order that is always maintained. So in other words the order of nodes in a linked list won't suddenly or randomly change, unless 
  we specifically want to change it.

  In every linked lists, there are always two special nodes, namely, the head node and the tail node.
      Head                                     Tail
  ['Hi'][o]->['There'][o]->['How're'][o]->['You?'][o]->null 

  ['Hi'][o] = node
  ['Hi'] = Data, can be anything we want. E.g., a number, an array, an object or basically any type of valid JavaScript value
  [o] = Reference to next node

- A quick implementation of a very small linked list:
const nodeOne = {
  data: 123 // data can be named as anything else, but by convention, we use data
};

const nodeTwo = {
  data: 456 // data can be named as anything else, but by convention, we use data
};

nodeOne.next = nodeTwo; // just like data, the next property is completely arbitrary. We could call it nextNode, nextRef or whatever we want. But again, we went with the convention

['Hi'][o]->['There'][o]->null

So by convention we usually make sure that every node has exactly two properties the data property and the next property.





What is a tree?
- A basic is like the following diagram:

                           [20]
                           /|\
                          / | \
                         /  |  \
                      [0] [40] [-15]
                      /|\         \
                     / | \         \
                    /  |  \         \
                [12] [-2] [1]      [-2]

In that diagram...
1. [xx] is a node
2. A node has data and children[]. In this example, our data is number, but it can also be a string, an array, an object or whatever we need it to be
3. 20 is the parent of 0, 40 and -15
4. 12 and -2 (whom parent is 0) are siblings. 12, -2 (whom parent is 0) and 1 are also siblings 
5. Despite being on same level, 1 and -2 (whom parent is -15) aren't siblings because they don't share a common parent.

Traversing through the tree = iterating through a tree
There are different orders of traversal:
1. Breadth-First traversal
    Start here -------------->[20]
                              /|\
                              / | \
                            /  |  \
    Then here ----------->[0] [40] [-15]
                          /|\         \
                        / | \         \
                        /  |  \         \
    Then here -----> [12] [-2] [1]      [-2]

    So it's like 20, 0, 40, -15, 12, -2, 1, -2

2. Depth-First traversal
                           [20]
                           /|\
                          / | \
                         /  |  \
                      [0] [40] [-15]
                      /|\         \
                     / | \         \
                    /  |  \         \
                [12] [-2] [1]      [-2]
    So it's like 20, 0, 12, -12, 1, 40, -15, -2
    Essentially, we start at the top of the tree, then we go down the very left hand side, as far as we can go. 
    Then as soon as we hit the bottom, we go back up to the closest parent and then go back down again.